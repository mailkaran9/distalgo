import sys
import Que1
import orig
import spec
import logging
import random
import time

config(channel is fifo, clock is lamport)

class stats(process):

    def setup(p:set):
        output("setup")

    def receive(msg= ('stats',_,p)):
        output("Received STATS message:", p)
        #data.append(('stats', _ , p))
        #send(('ack', logical_clock(), self), to= p)
   
    def receive(msg= ('statsdone',p)):
        output("Received STATSDONE message:", p)
        #data.append(('stats', _ , p))
        #send(('ack', logical_clock(), self), to= p)

    def run():
        output("Waiting for STATSDONE message")
        await(each(x in p,has=received(('statsdone',x))))

        output('terminating-','STATSDONE received')


def main():
  
    #Create and configure logger 
    logging.basicConfig(filename="origStats.log", format='%(asctime)s %(message)s', filemode='w') 


    logger=logging.getLogger() 
  
    #Setting the threshold of logger to INFO 
    logger.setLevel(logging.INFO)
    
    

    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    nrun = int(sys.argv[3]) if len(sys.argv) > 2 else 1
    nparam = int(sys.argv[4]) if len(sys.argv) > 2 else 1
    nrepeat = int(sys.argv[5]) if len(sys.argv) > 2 else 1
    
    #logger.info("Starting Testing")
    for i in range(nrun):
        numProcs = random.randint(1,nprocs)
        output("Iteration Number-",i+1)

        #Running for orig.da file
        startTimeOrig = time.time()
        startCpuTime = time.perf_counter()
        objStatsOrig = new(stats)
        psOrig = new(orig.P, num=numProcs)

        setup(objStatsOrig,(psOrig,))
        start(objStatsOrig)

        for pOrig in psOrig: setup(pOrig, (psOrig-{pOrig}, objStatsOrig, nrequests))
        start(psOrig)

        await(each(pOrig in psOrig, has=received(('done', pOrig))))
        send(('done',), to=psOrig)
        endTimeOrig = time.time()
        elapsedTime = endTimeOrig - startTimeOrig
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)

        #Running for Que1.da file
        startTimeQue1 = time.time()
        startCpuTime = time.perf_counter()
        objStatsQue1 = new(stats)
        psQue1 = new(Que1.P, num=numProcs)

        setup(objStatsQue1,(psQue1,))
        start(objStatsQue1)

        for pQue1 in psQue1: setup(pQue1, (psQue1-{pQue1}, objStatsQue1, nrequests))
        start(psQue1)

        await(each(pQue1 in psQue1, has=received(('done', pQue1))))
        send(('done',), to=psQue1)
        endTimeQue1 = time.time()
        elapsedQue1 = endTimeQue1 - startTimeQue1
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)
        
        #Running for spec.da file
        startTimeSpec = time.time()
        startCpuTime = time.perf_counter()
        objStatsSpec = new(stats)

        psSpec = new(spec.P, num= numProcs)
        setup(objStatsSpec,(psSpec,))
        start(objStatsSpec)
        for pSpec in psSpec: setup(pSpec, (psSpec-{pSpec},objStatsSpec, nrequests))
        start(psSpec)
        endTimeSpec = time.time()
        elapsedSpec = endTimeSpec - startTimeSpec
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)

    for i in range(nrun):
        numReqs = random.randint(1,nrequests)
        output("Iteration Number-",i+1)

        #Running for orig.da file
        startTimeOrig = time.time()
        startCpuTime = time.perf_counter()
        objStatsOrig = new(stats)
        psOrig = new(orig.P, num=nprocs)

        setup(objStatsOrig,(psOrig,))
        start(objStatsOrig)

        for pOrig in psOrig: setup(pOrig, (psOrig-{pOrig}, objStatsOrig, numReqs))
        start(psOrig)

        await(each(pOrig in psOrig, has=received(('done', pOrig))))
        send(('done',), to=psOrig)
        endTimeOrig = time.time()
        elapsedTime = endTimeOrig - startTimeOrig
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)
        

        #Running for Que1.da file
        startTimeQue1 = time.time()
        startCpuTime = time.perf_counter()
        objStatsQue1 = new(stats)
        psQue1 = new(Que1.P, num=nprocs)

        setup(objStatsQue1,(psQue1,))
        start(objStatsQue1)

        for pQue1 in psQue1: setup(pQue1, (psQue1-{pQue1}, objStatsQue1, numReqs))
        start(psQue1)

        await(each(pQue1 in psQue1, has=received(('done', pQue1))))
        send(('done',), to=psQue1)
        endTimeQue1 = time.time()
        elapsedQue1 = endTimeQue1 - startTimeQue1
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)

        
        #Running for spec.da file
        startTimeSpec = time.time()
        startCpuTime = time.perf_counter()
        objStatsSpec = new(stats)

        psSpec = new(spec.P, num= nprocs)
        setup(objStatsSpec,(psSpec,))
        start(objStatsSpec)
        for pSpec in psSpec: setup(pSpec, (psSpec-{pSpec},objStatsSpec, numReqs))
        start(psSpec)
        endTimeSpec = time.time()
        elapsedSpec = endTimeSpec - startTimeSpec
        output("Elapsed Time:",elapsedTime)
        endCpuTime = time.perf_counter()
        elapsedCpuTime = endCpuTime - startCpuTime
        output("CPU Time:",elapsedCpuTime)


    nproc_start=int(nprocs / nparam)
    for i in range(nrepeat):
        for j in range(nparam):
            for k in range(nproc_start,nprocs+1,nproc_start):
                output("Value of process:",k)
                #Running for orig.da file
                startCpuTime = time.perf_counter()
                startTimeOrig = time.time()
                objStatsOrig = new(stats)
                psOrig = new(orig.P, num=k)

                setup(objStatsOrig,(psOrig,))
                start(objStatsOrig)

                for pOrig in psOrig: setup(pOrig, (psOrig-{pOrig}, objStatsOrig, numReqs))
                start(psOrig)

                await(each(pOrig in psOrig, has=received(('done', pOrig))))
                send(('done',), to=psOrig)
                endTimeOrig = time.time()
                elapsedTime = endTimeOrig - startTimeOrig
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)

                #Running for Que1.da file
                startTimeQue1 = time.time()
                startCpuTime = time.perf_counter()
                objStatsQue1 = new(stats)
                psQue1 = new(Que1.P, num=k)

                setup(objStatsQue1,(psQue1,))
                start(objStatsQue1)

                for pQue1 in psQue1: setup(pQue1, (psQue1-{pQue1}, objStatsQue1, numReqs))
                start(psQue1)

                await(each(pQue1 in psQue1, has=received(('done', pQue1))))
                send(('done',), to=psQue1)
                endTimeQue1 = time.time()
                elapsedQue1 = endTimeQue1 - startTimeQue1
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)
                    
                #Running for spec.da file
                startTimeSpec = time.time()
                startCpuTime = time.perf_counter()
                objStatsSpec = new(stats)

                psSpec = new(spec.P, num= k)
                setup(objStatsSpec,(psSpec,))
                start(objStatsSpec)
                for pSpec in psSpec: setup(pSpec, (psSpec-{pSpec},objStatsSpec, numReqs))
                start(psSpec)
                endTimeSpec = time.time()
                elapsedSpec = endTimeSpec - startTimeSpec
                output("Elapsed Time:",elapsedTime)
                endTimeSpec = time.time()
                elapsedSpec = endTimeSpec - startTimeSpec
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)

    nreq_start=int(nrequests / nparam)
    for i in range(nrepeat):
        for j in range(nparam):
            for k in range(nreq_start,nrequests+1,nreq_start):
                output("Value of request:",k)
                #Running for orig.da file
                startTimeOrig = time.time()
                startCpuTime = time.perf_counter()
                objStatsOrig = new(stats)
                psOrig = new(orig.P, num=nprocs)

                setup(objStatsOrig,(psOrig,))
                start(objStatsOrig)

                for pOrig in psOrig: setup(pOrig, (psOrig-{pOrig}, objStatsOrig, k))
                start(psOrig)

                await(each(pOrig in psOrig, has=received(('done', pOrig))))
                send(('done',), to=psOrig)
                endTimeOrig = time.time()
                elapsedTime = endTimeOrig - startTimeOrig
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)

                #Running for Que1.da file
                startTimeQue1 = time.time()
                startCpuTime = time.perf_counter()
                objStatsQue1 = new(stats)
                psQue1 = new(Que1.P, num=nprocs)

                setup(objStatsQue1,(psQue1,))
                start(objStatsQue1)

                for pQue1 in psQue1: setup(pQue1, (psQue1-{pQue1}, objStatsQue1, k))
                start(psQue1)

                await(each(pQue1 in psQue1, has=received(('done', pQue1))))
                send(('done',), to=psQue1)
                endTimeQue1 = time.time()
                elapsedQue1 = endTimeQue1 - startTimeQue1
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)
                
                #Running for spec.da file
                startTimeSpec = time.time()
                startCpuTime = time.perf_counter()
                objStatsSpec = new(stats)

                psSpec = new(spec.P, num= nprocs)
                setup(objStatsSpec,(psSpec,))
                start(objStatsSpec)
                for pSpec in psSpec: setup(pSpec, (psSpec-{pSpec},objStatsSpec, k))
                start(psSpec)
                endTimeSpec = time.time()
                elapsedSpec = endTimeSpec - startTimeSpec
                output("Elapsed Time:",elapsedTime)
                endTimeSpec = time.time()
                elapsedSpec = endTimeSpec - startTimeSpec
                output("Elapsed Time:",elapsedTime)
                endCpuTime = time.perf_counter()
                elapsedCpuTime = endCpuTime - startCpuTime
                output("CPU Time:",elapsedCpuTime)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
