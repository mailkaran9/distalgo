import sys
import random
import time
import Que3_2
import orig_q3_2

files = [orig_q3_2,Que3_2]

class PaxosEval(process):
    def setup(p,a,l,n,r,d,w,tp,tl):  # s is set of all other processes
        self.p=p
        self.a=a
        self.l=l
        self.n=n
        self.r=r
        self.d=d
        self.w=w
        self.tp=tp
        self.tl=tl

    def setupProcesses():
        fileDictionary = {}

        timeDictionary = {}

        for file in files:
            output("**********************",file,"***********************")
            fileDictionary[file] = []
            f=str(file.__name__) 

            timeDictionary[f] = {"learners":l,"acceptors":a,"proposers":p,"elapsedTime":0,"cpuTime":0}

            for run in range(n):
                fileDictionary[file].append({"Learners" : set(), "Proposers": set(), "Acceptors" : set()})
                output("=============================FILE===============================", f)
                output("============================RUN=================================", run)
                
                startElapTime = time.time()
                startCpuTime = time.process_time()

                acceptors = new(file.Acceptor, num= a)
                fileDictionary[file][run]["Acceptors"] = acceptors

                prop = new(file.Proposer, (fileDictionary[file][run]["Acceptors"],tp,w,r,d), num= p)
                fileDictionary[file][run]["Proposers"] = prop

                learn = new(file.Learner, (fileDictionary[file][run]["Acceptors"],tl,r,d), num= l)
                fileDictionary[file][run]["Learners"] = learn
       
                for pro in fileDictionary[file][run]["Acceptors"]: setup(pro, (fileDictionary[file][run]["Learners"],r,d))

                start(fileDictionary[file][run]["Acceptors"] | fileDictionary[file][run]["Proposers"] | fileDictionary[file][run]["Learners"])
                
                await(each(ll in fileDictionary[file][run]["Learners"], has=received(('learning_done', ll), from_=ll)))

                
                send(('done',), to= (fileDictionary[file][run]["Acceptors"]|fileDictionary[file][run]["Proposers"]))
                output("=======================Send Done FOR RUN=======================", run)

                endElapTime = time.time()
                endCpuTime = time.process_time()

                elapsedTime1 = endElapTime - startElapTime
                cpuTime1 = endCpuTime - startCpuTime

                timeDictionary[f]["elapsedTime"] = timeDictionary[f]["elapsedTime"] + elapsedTime1
                timeDictionary[f]["cpuTime"] = timeDictionary[f]["cpuTime"] + cpuTime1

        output("----------------------------------------------------------------------------------")
        output("----------------------------------------------------------------------------------")
        output("----------------------------------------------------------------------------------")
        output("----------------------------------------------------------------------------------")
        output(timeDictionary)
        output("----------------------------------------------------------------------------------")
        output("----------------------------------------------------------------------------------")
        output("----------------------------------------------------------------------------------")

        
    def run():
        setupProcesses()
        output('terminating...')
        send(('done', self), to= parent())
        output("waiting in class")
        await(received(('done'), from_=parent()))
        output("waiting in class:exit")
        output("Received done from parent")

def main():
    # p - number of proposers
    p = int(sys.argv[1]) if len(sys.argv) > 1 else 5

    # a - number of acceptors
    a = int(sys.argv[2]) if len(sys.argv) > 2 else 5

    # l - number of learners
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 5

    # n - number of repetitions for each run
    n = int(sys.argv[4]) if len(sys.argv) > 4 else 1
    
    # r - message loss rate
    r = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    
    # d - message delay
    d = int(sys.argv[6]) if len(sys.argv) > 6 else 0
    
    # w - wait time
    w = int(sys.argv[7]) if len(sys.argv) > 7 else 0
    
    # tp - timeout for proposers
    tp = int(sys.argv[8]) if len(sys.argv) > 8 else 1

    # tl - timeout for learners
    tl = int(sys.argv[9]) if len(sys.argv) > 9 else 10
    
    paxos = new(PaxosEval, num=1)
    setup(paxos,(p,a,l,n,r,d,w,tp,tl))
    start(paxos)
    output("waiting in main")


    await(each(pa in paxos, has=received(('done', pa))))
    output("waiting in main:exit")
    
    send(('done'), to=paxos)
    
    output("bye")

