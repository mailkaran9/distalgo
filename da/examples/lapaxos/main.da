import sys
import random
import time
from Que3_2 import Acceptor
from Que3_2 import Proposer
from Que3_2 import Learner
config(channel is fifo, clock is lamport)

class PaxosEval(process):
    def setup(p,a,l,n,r,d,w,tp,tl):  # s is set of all other processes
        self.p=p
        self.a=a
        self.l=l
        self.n=n
        self.r=r
        self.d=d
        self.w=w
        self.tp=tp
        self.tl=tl

    def setupProcesses(): pass
        #acceptors = new(Acceptor, num= a)
        #proposers = new(Proposer, (acceptors,), num= p)
        #learners = new(Learner, (acceptors,), num= l)
        #for p in acceptors: setup(p, (learners,))
        #output("Acceptors", acceptors, "Proposers", proposers, "L:earners", learners)
    def run():
        #setupProcesses()
        output('terminating...')
        send(('done', self), to= parent())
        output("waiting in class")
        await(received(('done'), from_=parent()))
        output("waiting in class:exit")
        output("Received done from parent")
def main():
    # p - number of proposers
    p = int(sys.argv[1]) if len(sys.argv) > 3 else 5

    # a - number of acceptors
    a = int(sys.argv[2]) if len(sys.argv) > 3 else 5

    # l - number of learners
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 5

    # n - number of repetitions for each run
    n = int(sys.argv[4]) if len(sys.argv) > 10 else 10
    
    # r - message loss rate
    r = int(sys.argv[5]) if len(sys.argv) > 1 else 0
    
    # d - message delay
    d = int(sys.argv[6]) if len(sys.argv) > 1 else 0
    
    # w - wait time
    w = int(sys.argv[7]) if len(sys.argv) > 1 else 0
    
    # tp - timeout for proposers
    tp = int(sys.argv[8]) if len(sys.argv) > 1 else 1

    # tl - timeout for learners
    tl = int(sys.argv[9]) if len(sys.argv) > 1 else 1
    
    paxos = new(PaxosEval, num=1)
    setup(paxos,(p,a,l,n,r,d,w,tp,tl))
    start(paxos)
    output("waiting in main")

    await(each(pa in paxos, has=received(('done', pa))))
    output("waiting in main:exit")
    
    send(('done'), to=paxos)
