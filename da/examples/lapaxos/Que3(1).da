import sys
from random import randint
TIMEOUT = 1

learnedValue={}

class Proposer(process):
    def setup(acceptors:set):
        self.n = None              # proposal number
        self.maxProp = None        #value returned if proposer fails to get majority
        self.majority = acceptors  # majority of acceptors; all in other papers
        

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num

        if maxProp!=None:
            if(maxProp[0] > n[0]):
                #prempt and update proposal number
                output("Old Proposal Number: ",n)
                n=(maxProp[0]+1,self)
                output("New Proposal Number: ",n)


        send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))

            send(('proposeValue',v),to=nodeof(self))

            send(('accept', n, v), to= responded)
            debug('### chose', n, v)

        elif timeout(TIMEOUT):
            output('failed proposal number', n)
            
    def receive(msg= ('updateProp', n, max)):
        if ((max != None and maxProp==None) or (max!=None and maxProp!=None and max[0][0]>maxProp[0])):
            output("max -------",max)
            output("maxprop ----",maxProp)
            maxProp = max[0]   

    def run():
        while not received(('done',)):
            to_consent()
        output('terminating')


    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process):
    def setup(learners:set): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)
        else:
            #return max proposal
            maxprop = anyof(setof((n, v), sent(('respond', n, v)),
                               n==max(setof(n, sent(('respond', n, _))))))
            send(('updateProp', n, maxprop), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)

    def run():
        await(received(('done',)))
        output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process):
    def setup(acceptors:set): 
        self.learnedVal = None

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            learnedVal = (n[1],v)
            output('learned', n, v)

        elif timeout(TIMEOUT * 10):
            output('failed learning anything')

    def run():
        learn()
        output('terminating')
        send(('learned', ), to=nodeof(self))
        send(('learnedValue',learnedVal), to=nodeof(self))



def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors,), num= nproposers)
    learners = new(Learner, (acceptors,), num= nlearners)
    for p in acceptors: setup(p, (learners,))
    start(acceptors | proposers | learners)

    await(each(l in learners, has=received(('learned',), from_=l)))
    output('done')
    send(('done',), to= (acceptors|proposers))

    s = set()

    count = 0
    for l in learners:
        a = setof(val, received(('learnedValue',val),from_=l),True)
        if a is not None and len(a)==1:
            count = count + 1
        s = s | a

    element = next(iter(s))
    valueProposed = False
    valProp = set()
    for p in proposers:
        prop = setof(val, received(('proposeValue',val),from_=l),True)
        valProp = valProp | prop
    output("Set of Proposed Values: ",valProp)
    if element!=None and element[1] in valProp:
        valProposed = True
    if(count == nlearners and len(s)==1 and valProposed == True):
        output("Proposer and Value learned =",s)
        output("CORRECTNESS TESTING -------------PASS")
    else:
        output("CORRECTNESS TESTING -------------FAIL")
            



# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
